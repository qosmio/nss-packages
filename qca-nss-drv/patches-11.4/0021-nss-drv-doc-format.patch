--- a/exports/nss_wifi_mesh.h
+++ b/exports/nss_wifi_mesh.h
@@ -386,27 +386,27 @@ struct nss_wifi_mesh_path_expiry_msg {
  *	Encapsulation statistics.
  */
 struct nss_wifi_mesh_encap_stats {
-	uint32_t expiry_notify_sent;		/* Number of times expiry notification sent to host. */
-	uint32_t mc_count;			/* Number of multicast packets. */
-	uint32_t mp_not_found;			/* Number of times mesh path is not found. */
-	uint32_t mp_active;			/* Number of times mesh path is active. */
-	uint32_t mpp_not_found;			/* Number of times proxy path is not found. */
-	uint32_t mpp_found;			/* Number of times proxy path is found. */
-	uint32_t encap_hdr_fail;		/* Number of times encapsulating mesh header failed. */
-	uint32_t mp_del_notify_fail;		/* Number of times notifying mesh path delete failed. */
-	uint32_t link_enqueue;			/* Number of packets enqueued to the link VAP. */
-	uint32_t link_enq_fail;			/* Number of times enqueue to link vap failed. */
-	uint32_t ra_lup_fail;			/* Number of times receiver address look up is failed. */
-	uint32_t dummy_add_count;		/* Number of times dummy path is added. */
-	uint32_t encap_mp_add_notify_fail;	/* Number of times add notification failed. */
-	uint32_t dummy_add_fail;		/* Number of times dummy addition failed. */
-	uint32_t dummy_lup_fail;		/* Number of times dummy lookup failed. */
-	uint32_t send_to_host_failed;		/* Number of packets failed to be sent to host. */
-	uint32_t sent_to_host;			/* Number of packets sent to host. */
-	uint32_t expiry_notify_fail; 		/* Number of times expiry notification to host failed. */
-	uint32_t no_headroom;			/* Number of packets dropped because there is no headroom. */
-	uint32_t path_refresh_sent;		/* Number of times path refresh is sent to host. */
-	uint32_t linearise_failed;		/* Number of packets dropped because pb_linearise. */
+	uint32_t expiry_notify_sent;		/**< Number of times expiry notification sent to host. */
+	uint32_t mc_count;			/**< Number of multicast packets. */
+	uint32_t mp_not_found;			/**< Number of times mesh path is not found. */
+	uint32_t mp_active;			/**< Number of times mesh path is active. */
+	uint32_t mpp_not_found;			/**< Number of times proxy path is not found. */
+	uint32_t mpp_found;			/**< Number of times proxy path is found. */
+	uint32_t encap_hdr_fail;		/**< Number of times encapsulating mesh header failed. */
+	uint32_t mp_del_notify_fail;		/**< Number of times notifying mesh path delete failed. */
+	uint32_t link_enqueue;			/**< Number of packets enqueued to the link VAP. */
+	uint32_t link_enq_fail;			/**< Number of times enqueue to link vap failed. */
+	uint32_t ra_lup_fail;			/**< Number of times receiver address look up is failed. */
+	uint32_t dummy_add_count;		/**< Number of times dummy path is added. */
+	uint32_t encap_mp_add_notify_fail;	/**< Number of times add notification failed. */
+	uint32_t dummy_add_fail;		/**< Number of times dummy addition failed. */
+	uint32_t dummy_lup_fail;		/**< Number of times dummy lookup failed. */
+	uint32_t send_to_host_failed;		/**< Number of packets failed to be sent to host. */
+	uint32_t sent_to_host;			/**< Number of packets sent to host. */
+	uint32_t expiry_notify_fail; 		/**< Number of times expiry notification to host failed. */
+	uint32_t no_headroom;			/**< Number of packets dropped because there is no headroom. */
+	uint32_t path_refresh_sent;		/**< Number of times path refresh is sent to host. */
+	uint32_t linearise_failed;		/**< Number of packets dropped because pb_linearise. */
 };
 
 /*
--- a/nss_wifi_mesh_strings.c
+++ b/nss_wifi_mesh_strings.c
@@ -106,22 +106,22 @@ static ssize_t nss_wifi_mesh_path_stats_
  * 	Wi-Fi mesh proxy path statistics string.
  */
 struct nss_stats_info nss_wifi_mesh_strings_proxy_path_stats[NSS_WIFI_MESH_PROXY_PATH_STATS_TYPE_MAX] = {
-	{"alloc_failures",		NSS_STATS_TYPE_SPECIAL},
-	{"entry_exist_failures",	NSS_STATS_TYPE_SPECIAL},
-	{"add_success",			NSS_STATS_TYPE_SPECIAL},
-	{"table_full_errors",		NSS_STATS_TYPE_SPECIAL},
-	{"insert_failures",		NSS_STATS_TYPE_SPECIAL},
-	{"not_found",			NSS_STATS_TYPE_SPECIAL},
-	{"unhashed_errors",		NSS_STATS_TYPE_SPECIAL},
-	{"delete_failures",		NSS_STATS_TYPE_SPECIAL},
-	{"delete_success",		NSS_STATS_TYPE_SPECIAL},
-	{"update_success",		NSS_STATS_TYPE_SPECIAL},
-	{"lookup_success",		NSS_STATS_TYPE_SPECIAL},
-	{"add_requests",		NSS_STATS_TYPE_SPECIAL},
-	{"del_requests",		NSS_STATS_TYPE_SPECIAL},
-	{"update_requests",		NSS_STATS_TYPE_SPECIAL},
-	{"mda_updations",		NSS_STATS_TYPE_SPECIAL},
-	{"flag_updations",		NSS_STATS_TYPE_SPECIAL}
+	{"alloc_failures",				NSS_STATS_TYPE_SPECIAL},
+	{"entry_exist_failures",			NSS_STATS_TYPE_SPECIAL},
+	{"add_success",					NSS_STATS_TYPE_SPECIAL},
+	{"table_full_errors",				NSS_STATS_TYPE_SPECIAL},
+	{"insert_failures",				NSS_STATS_TYPE_SPECIAL},
+	{"not_found",					NSS_STATS_TYPE_SPECIAL},
+	{"unhashed_errors",				NSS_STATS_TYPE_SPECIAL},
+	{"delete_failures",				NSS_STATS_TYPE_SPECIAL},
+	{"delete_success",				NSS_STATS_TYPE_SPECIAL},
+	{"update_success",				NSS_STATS_TYPE_SPECIAL},
+	{"lookup_success",				NSS_STATS_TYPE_SPECIAL},
+	{"add_requests",				NSS_STATS_TYPE_SPECIAL},
+	{"del_requests",				NSS_STATS_TYPE_SPECIAL},
+	{"update_requests",				NSS_STATS_TYPE_SPECIAL},
+	{"mda_updations",				NSS_STATS_TYPE_SPECIAL},
+	{"flag_updations",				NSS_STATS_TYPE_SPECIAL}
 };
 
 /*
--- a/exports/nss_wifi.h
+++ b/exports/nss_wifi.h
@@ -641,8 +641,8 @@ struct nss_wifi_stats_sync_msg {
  *	Information for creating a Wi-Fi peer freelist.
  */
 struct nss_wifi_peer_freelist_append_msg {
-	uint32_t addr;		/**< Starting address of peer freelist pool. */
-	uint32_t length;	/**< Size of peer freelist pool. */
+	uint32_t addr;		/**< Starting address of the peer freelist pool. */
+	uint32_t length;	/**< Size of the peer freelist pool. */
 	uint32_t num_peers;	/**< Maximum peer entries supported in the pool. */
 };
 
@@ -709,7 +709,7 @@ struct nss_wifi_peer_ol_stats {
 	uint32_t tx_mcast;	/**< Number of multicast packets sent. */
 	uint32_t tx_ucast;	/**< Number of unicast packets sent. */
 	uint32_t tx_data;	/**< Number data packets sent. */
-	uint32_t tx_bytes;	/**< Number of bytes sent. */
+	uint32_t tx_bytes;	/**< Number of bytes transmitted. */
 	uint32_t tx_fail;	/**< Number of failed Tx packets. */
 	uint32_t thrup_bytes;	/**< Number of throughput bytes. */
 	uint32_t tx_bcast_pkts;	/**< Number of broadcast packets sent. */
@@ -742,7 +742,7 @@ struct nss_wifi_ol_stats_msg {
 
 /**
  * nss_wifi_sta_kickout_msg
- *	Station kickout message from NSS Firmware
+ *	Station kickout message from NSS firmware.
  */
 struct nss_wifi_sta_kickout_msg {
 	uint32_t peer_id;	/**< Peer ID. */
@@ -759,7 +759,7 @@ struct nss_wifi_peer_isolation_msg {
 
 /**
  * nss_wifi_wnm_peer_rx_activity_msg
- *	Rx active state information for the peer.
+ *	Receive active state information for the peer.
  */
 struct nss_wifi_wnm_peer_rx_activity_msg {
 	uint16_t nentries;	/**< Number of entries. */
@@ -917,7 +917,7 @@ struct nss_wifi_msg {
 		struct nss_wifi_cmd_msg wcmdm;
 				/**< Pdev command information. */
 		struct nss_wifi_enable_ol_statsv2 wesh_msg;
-				/**< Enable version 2 tx/rx stats. */
+				/**< Enable version 2 transmit/receive statistics. */
 		struct nss_wifi_ol_peer_time_msg wopt_msg;
 				/**< Send per peer/TID timestamp statistics to host. */
 		struct nss_wifi_peer_isolation_msg isolation_msg;
@@ -927,7 +927,7 @@ struct nss_wifi_msg {
 
 /**
  * nss_wifi_get_context
- *	Gets the Wi-Fi context used in nss_gre_tx.
+ *	Gets the Wi-Fi context used in NSS GRE transmit.
  *
  * @return
  * Pointer to the NSS core context.
